c-----------------------------------------------------------------------
c     depend on SIZE
c     size
      integer lxv,lyv,lzv,lxyzv,lref,lcut,lseg
      parameter(lxv=2,lyv=2,lzv=1+(ldim-2)*(lxv-1),lxyzv=(2**ldim)) ! for vertex
      parameter(lref=10)                   ! max number of layers (nel * lref)
      parameter(lcut=2,lseg=lcut+1)        ! max number of cuts (nel * lseg * lseg)

c     Work arrays
      real xmc(lx1,ly1,lz1,lelt)          ! rotated copy of xm1, ym1, and zm1
     $   , ymc(lx1,ly1,lz1,lelt)
     $   , zmc(lx1,ly1,lz1,lelt)
     $   , bc_wk(5,6,lelt,2)              ! rotated copy of bc, mainly for periodic
      common /rREFINE/ xmc,ymc,zmc,bc_wk

      integer*8 vertexc(lxv,lyv,lzv,lelt) ! rotated copy of vertex
     $        , vertexu(lxv,lzv,lelt)     ! vertex on the bdry face
     $        , nvtx0                     ! total number of unique vertices for original mesh
     $        , nvtx_lv                   ! total number of unique vertices on face
      common /i8REFINE/ vertexc,vertexu,nvtx0,nvtx_lv

      integer ie_ref_wk(lelt)
     $      , nelv0,nelt0                 ! nelv of the original mesh
     $      , nel_lv                      ! number of element on bdry within rank
     $      , nelgv0,nelgt0               ! nelgv of the original mesh
     $      , nelg_lv                     ! total number of elements on bdry
     $      , nel_lv_shift                ! accumulated number of elements on bdry (from rank0 to current)
     $      , icbc_bkup(2)                ! status of cbc backup slots
     $      , bID_wk(6,lelt,2)            ! alternative for cbc
     $      , bID_bkup(6,lelt,2)          ! alternative for cbc
     $      , em_type(lelt)               ! 1=fluid mesh, 2=solid mesh
      common /iREFINE/ ie_ref_wk,nelv0,nelt0,nel_lv
     $               , nelgv0,nelgt0,nelg_lv,nel_lv_shift
     $               , icbc_bkup,em_type
      data icbc_bkup /0,0/

      character*3 cbc_wk(6,lelt,2)        ! rotated copy of cbc
     $          , cbc_bkup(6,lelt,2)      ! backup
      common /c3REFINE/ cbc_wk,cbc_bkup
