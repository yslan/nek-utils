#!/bin/bash
: ${PROJ_ID:=""}

: ${QUEUE:="prod"} # debug, debug-scaling, prod https://docs.alcf.anl.gov/running-jobs/job-and-queue-scheduling/
: ${NEKRS_HOME:="$HOME/.local/nekrs"}
: ${NEKRS_CACHE_BCAST:=1}
: ${NEKRS_BUILD_ONLY:=0}
: ${NEKRS_SKIP_BUILD_ONLY:=0}
: ${NEKRS_DFLOAT_FP32:=0}
: ${NEKRS_CIMODE:=""}

if [ $# -ne 3 ]; then
  echo "usage: [PROJ_ID] [QUEUE] $0 <casename> <number of compute nodes> <hh:mm:ss>"
  exit 0
fi

if [ -z "$PROJ_ID" ]; then
  echo "ERROR: PROJ_ID is empty"
  exit 1
fi

if [ -z "$QUEUE" ]; then
  echo "ERROR: QUEUE is empty"
  exit 1
fi

bin=${NEKRS_HOME}/bin/nekrs
if [[ $NEKRS_DFLOAT_FP32 -eq 1 ]]; then
  bin=${NEKRS_HOME}/bin/nekrs-fp32
fi
case=$1
nodes=$2
gpu_per_node=4
cores_per_numa=8
let nn=$nodes*$gpu_per_node
let ntasks=nn
time=$3

backend=CUDA
NEKRS_GPU_MPI=1

cimode=""
if [ ! -z $NEKRS_CIMODE ]; then
  cimode="--cimode $NEKRS_CIMODE"
fi 

time_fmt=`echo $time|tr ":" " "|awk '{print NF}'`
if [ "$time_fmt" -ne "3" ]; then
  echo "Warning: time is not in the format <hh:mm:ss>"
  echo $time
  exit 1
fi

isneknek=0
if [[ $case == *.sess ]]; then
  casename_nn="${case%.sess}"
  echo "This is a neknek case: "$casename_nn
  isneknek=1
fi

if [ ! -f $bin ]; then
  echo "Cannot find" $bin
  exit 1
fi

if [ $isneknek == 0 ]; then
  list=($case.par $case.udf $case.re2)
  for f in ${list[@]}; do
    if [ ! -f $f ]; then
      echo "Cannot find" $f
      exit 1
    fi
  done
else
  if [ ! -f $case ]; then
    echo "Cannot find" $case
    exit 1
  fi
  ntasks_nn=`cat $case | awk -F ':' '{sum+=$2} END{print sum}'`
  if [ $ntasks -ne $ntasks_nn ]; then
    echo "Warning: total #ranks in $case not matched with $ntasks"
    exit 1
  fi
  nsess_nn=`wc -l $case|awk '{print $1}'`

  while read p; do  # chk neknek subfolders
    fldr_nn="${p%/*}"
    pp="${p%;}"
    cname_nn=`echo $pp| awk -F '[/:;]' '{print $(NF-1)}';`
    nrank_nn=`echo $pp| awk -F '[/:;]' '{print $(NF)}';`

#   list=($fldr_nn/$cname_nn.par $fldr_nn/$cname_nn.udf $fldr_nn/$cname_nn.re2)
    list=($fldr_nn/$cname_nn.par $fldr_nn/$cname_nn.re2)
    for f in ${list[@]}; do
      if [ ! -f $f ]; then
        echo "Cannot find" $f
        exit 1
      fi
    done
  done < $case
fi

qnodes=$nodes
jobname="nekRS_"$case
if [ $NEKRS_BUILD_ONLY -eq 1 ]; then
  qnodes=1
  jobname="nekRS_build_"$case
  NEKRS_SKIP_BUILD_ONLY=0
fi
if [ $isneknek == 1 ];then
  NEKRS_CACHE_BCAST=0 # TODO: need to fix this...
  if [ $NEKRS_BUILD_ONLY -eq 1 ]; then
    qnodes=$nsess_nn
    jobname="nekRS_nn_build_"$casename_nn
    NEKRS_SKIP_BUILD_ONLY=0
  else
    qnodes=$nodes
    jobname="nekRS_nn_"$casename_nn
    NEKRS_SKIP_BUILD_ONLY=1
  fi
fi

striping_unit=16777216
max_striping_factor=128
let striping_factor=$nodes/2
if [ $striping_factor -gt $max_striping_factor ]; then
  striping_factor=$max_striping_factor
fi
if [ $striping_factor -lt 1 ]; then
  striping_factor=1
fi

MPICH_MPIIO_HINTS="*:striping_unit=${striping_unit}:striping_factor=${striping_factor}:romio_cb_write=enable:romio_ds_write=disable:romio_no_indep_rw=true"

# sbatch
SFILE=s.bin
echo "#!/bin/bash" > $SFILE
echo "#PBS -A $PROJ_ID" >>$SFILE
echo "#PBS -N $jobname" >>$SFILE
echo "#PBS -q $QUEUE" >>$SFILE
echo "#PBS -l walltime=$time" >>$SFILE
echo "#PBS -l filesystems=home:eagle:grand" >>$SFILE
echo "#PBS -l select=$qnodes:system=polaris" >>$SFILE
echo "#PBS -l place=scatter" >>$SFILE
echo "#PBS -k doe" >>$SFILE #write directly to the destination, doe=direct, output, error
echo "#PBS -j eo" >>$SFILE  #oe=merge stdout/stderr to stdout


# job to “run” from your submission directory
echo "cd \$PBS_O_WORKDIR" >> $SFILE
echo "cat \$PBS_NODEFILE" >> $SFILE

echo "module use /soft/modulefiles" >> $SFILE
echo "module use /opt/cray/pe/lmod/modulefiles/mix_compilers" >> $SFILE
echo "module load libfabric" >> $SFILE
echo "module load PrgEnv-gnu" >> $SFILE
echo "module load nvhpc-mixed" >> $SFILE
echo "module load craype-x86-milan craype-accel-nvidia80" >> $SFILE
echo "module load spack-pe-base cmake" >> $SFILE
echo "module list" >> $SFILE

echo "nvidia-smi" >> $SFILE
echo "ulimit -s unlimited " >>$SFILE

echo "export NEKRS_HOME=$NEKRS_HOME" >>$SFILE
echo "export NEKRS_GPU_MPI=$NEKRS_GPU_MPI" >>$SFILE

echo "export MPICH_MPIIO_HINTS=$MPICH_MPIIO_HINTS" >>$SFILE
echo "export MPICH_MPIIO_STATS=1" >>$SFILE

echo "export NEKRS_CACHE_BCAST=$NEKRS_CACHE_BCAST" >>$SFILE
echo "export NEKRS_LOCAL_TMP_DIR=/local/scratch" >>$SFILE

echo "export MPICH_GPU_SUPPORT_ENABLED=1" >> $SFILE
echo "export MPICH_OFI_NIC_POLICY=NUMA" >> $SFILE


# https://github.com/Nek5000/Nek5000/issues/759
echo "export FI_OFI_RXM_RX_SIZE=32768" >> $SFILE # >=lelt, large mpi-messsage for restart
#echo "export FI_CXI_RX_MATCH_MODE=hybrid" >> $SFILE

# Known issues after ss11 upgrade
echo "LD_PRELOAD=/opt/cray/pe/gcc/12.2.0/snos/lib64/libstdc++.so.6" >> $SFILE

CMD=.lhelper
echo "#!/bin/bash" >$CMD
echo "APP=\"\$*\"" >>$CMD
echo "gpu_id=\$((${gpu_per_node} - 1 - \${PMI_LOCAL_RANK} % ${gpu_per_node}))" >>$CMD
echo "export CUDA_VISIBLE_DEVICES=\$gpu_id" >>$CMD
echo "\$APP" >>$CMD
chmod 755 $CMD

if [ $NEKRS_SKIP_BUILD_ONLY -eq 0 ]; then
  echo "# precompilation" >>$SFILE
  if [ $isneknek == 0 ]; then
    echo "mpiexec -n $gpu_per_node  -ppn $gpu_per_node -d $cores_per_numa --cpu-bind depth ./$CMD $bin --setup ${case} $cimode --backend ${backend} --device-id 0 --build-only $ntasks" >>$SFILE
  else
    echo "set -x" >> $SFILE
    echo "" >>$SFILE
    while read p; do
      cname_nn="${p%:*}"
      nrank_nn=`echo "${p##*:}" | tr -d ";"`
      echo "mpiexec -n $gpu_per_node -ppn $gpu_per_node -d $cores_per_numa --cpu-bind depth ./$CMD $bin --setup ${cname_nn} $cimode --backend ${backend} --device-id 0 --build-only $nrank_nn &" >>$SFILE
      echo "sleep 1s" >>$SFILE
      echo "" >>$SFILE
    done < $case
    echo "set +x" >> $SFILE
    echo "wait" >>$SFILE
  fi
  echo "if [ \$? -ne 0 ]; then" >> $SFILE
  echo "  exit" >> $SFILE
  echo "fi" >> $SFILE
fi
echo "" >> $SFILE

if [ $NEKRS_BUILD_ONLY -eq 0 ]; then
echo "mpiexec -n $ntasks -ppn $gpu_per_node -d $cores_per_numa --cpu-bind depth ./$CMD $bin --setup ${case} $cimode --backend ${backend} --device-id 0" >>$SFILE
fi

qsub -q $QUEUE $SFILE

# clean-up
#rm -rf $SFILE $ROMIO_HINTS .lhelper
